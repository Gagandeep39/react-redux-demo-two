{"version":3,"sources":["components/Person/Person.js","components/AddPerson/AddPerson.js","containers/Persons.js","store/actions.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["Person","props","className","onClick","clicked","name","age","AddPerson","useState","nameState","setNameState","ageState","setAgeState","type","placeholder","onChange","event","target","value","personAdded","Persons","this","onAddedPerson","prs","map","person","key","id","onRemovedPerson","Component","connect","state","persons","dispatch","personData","personId","App","Boolean","window","location","hostname","match","initialState","reducer","action","newPerson","Date","concat","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAWeA,G,MAPA,SAACC,GAAD,OACb,yBAAKC,UAAU,SAASC,QAASF,EAAMG,SACrC,4BAAKH,EAAMI,MACX,mCAASJ,EAAMK,Q,OCiCJC,G,MApCG,SAACN,GAAW,IAAD,EACOO,mBAAS,IADhB,mBACpBC,EADoB,KACTC,EADS,OAEKF,mBAAS,IAFd,mBAEpBG,EAFoB,KAEVC,EAFU,KAY3B,OACE,yBAAKV,UAAU,aAEb,2BACEG,KAAK,OACLQ,KAAK,OACLC,YAAY,OACZC,SAfoB,SAACC,GACzBN,EAAaM,EAAMC,OAAOC,QAetBA,MAAOT,IAET,2BACEJ,KAAK,MACLQ,KAAK,SACLC,YAAY,MACZC,SAlBmB,SAACC,GACxBJ,EAAYI,EAAMC,OAAOC,QAkBrBA,MAAOP,IAET,4BAAQR,QAAS,kBAAMF,EAAMkB,YAAYV,EAAWE,KAApD,iBC1BAS,E,uKACM,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAWD,YAAaE,KAAKpB,MAAMqB,gBAClCD,KAAKpB,MAAMsB,IAAIC,KAAI,SAACC,GAAD,OAClB,kBAAC,EAAD,CACEC,IAAKD,EAAOE,GACZtB,KAAMoB,EAAOpB,KACbC,IAAKmB,EAAOnB,IACZF,QAAS,kBAAM,EAAKH,MAAM2B,gBAAgBH,EAAOE,e,GAVvCE,aA+BPC,eAbS,SAACC,GACvB,MAAO,CACLR,IAAKQ,EAAMC,YAIY,SAACC,GAC1B,MAAO,CACLX,cAAe,SAACjB,EAAMC,GAAP,OAAe2B,EAAS,CAAEpB,KCjCnB,aDiCiDqB,WAAY,CAAC7B,KAAMA,EAAMC,IAAKA,MACrGsB,gBAAiB,SAACD,GAAD,OAAQM,EAAS,CAAEpB,KCjCX,gBDiC4CsB,SAAUR,QAIpEG,CAA6CV,GE1B7CgB,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACnBV,QAAS,IA0BIW,EAvBC,WAAmC,IAAlCZ,EAAiC,uDAAzBW,EAAcE,EAAW,uCAChD,OAAQA,EAAO/B,MACb,IHRsB,aGSpB,IAAMgC,EAAY,CAChBlB,GAAI,IAAImB,KACRzC,KAAMuC,EAAOV,WAAW7B,KACxBC,IAAKsC,EAAOV,WAAW5B,KAEzB,OAAO,2BACFyB,GADL,IAEEC,QAASD,EAAMC,QAAQe,OAAOF,KAElC,IHjByB,gBGkBvB,OAAO,2BACFd,GADL,IAEEC,QAASD,EAAMC,QAAQgB,QACrB,SAACvB,GAAD,OAAYA,EAAOE,KAAOiB,EAAOT,cAIzC,OAAOJ,GChBHkB,EAAQC,YAAYP,GAE1BQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64528e66.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Person.component.css';\n\nconst Person = (props) => (\n  <div className='Person' onClick={props.clicked}>\n    <h1>{props.name}</h1>\n    <p>Age: {props.age}</p>\n  </div>\n);\n\nexport default Person;\n","import React, { useState } from 'react';\n\nimport './AddPerson.component.css';\n\nconst AddPerson = (props) => {\n  const [nameState, setNameState] = useState('');\n  const [ageState, setAgeState] = useState('');\n\n  const nameChangeHandler = (event) => {\n    setNameState(event.target.value);\n  };\n\n  const ageChangeHandler = (event) => {\n    setAgeState(event.target.value);\n  };\n\n  return (\n    <div className='AddPerson'>\n      {/* <input name='name' type='text' placeholder='Name' onChange={(event)=>nameChangeHandler(event)}/> */}\n      <input\n        name='name'\n        type='text'\n        placeholder='Name'\n        onChange={nameChangeHandler}\n        value={nameState}\n      />\n      <input\n        name='age'\n        type='number'\n        placeholder='Age'\n        onChange={ageChangeHandler}\n        value={ageState}\n      />\n      <button onClick={() => props.personAdded(nameState, ageState)}>\n        Add Person\n      </button>\n    </div>\n  );\n};\n\nexport default AddPerson;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Person from '../components/Person/Person';\nimport AddPerson from '../components/AddPerson/AddPerson';\nimport * as actionTypes from '../store/actions';\n\nclass Persons extends Component {\n  render() {\n    return (\n      <div>\n        <AddPerson personAdded={this.props.onAddedPerson} />\n        {this.props.prs.map((person) => (\n          <Person\n            key={person.id}\n            name={person.name}\n            age={person.age}\n            clicked={() => this.props.onRemovedPerson(person.id)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    prs: state.persons,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAddedPerson: (name, age) => dispatch({ type: actionTypes.ADD_PERSON, personData: {name: name, age: age}}),\n    onRemovedPerson: (id) => dispatch({ type: actionTypes.REMOVE_PERSON, personId: id }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Persons);\n","export const ADD_PERSON = 'ADD_PERSON';\nexport const REMOVE_PERSON = 'REMOVE_PERSON';\n","import React from 'react';\nimport './App.css';\nimport Persons from './containers/Persons';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Persons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actions';\n\nconst initialState = {\n  persons: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_PERSON:\n      const newPerson = {\n        id: new Date(), // not really unique but good enough here!\n        name: action.personData.name,\n        age: action.personData.age,\n      };\n      return {\n        ...state,\n        persons: state.persons.concat(newPerson),\n      };\n    case actionTypes.REMOVE_PERSON:\n      return {\n        ...state,\n        persons: state.persons.filter(\n          (person) => person.id !== action.personId\n        ),\n      };\n  }\n  return state;\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}